---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: istios.operator.kyma-project.io
spec:
  group: operator.kyma-project.io
  names:
    kind: Istio
    listKind: IstioList
    plural: istios
    singular: istio
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Contains Istio CR specification and current status.
        properties:
          apiVersion:
            description: 'Defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. For more information,
              read the [API Conventions documentation](https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds)'
            type: string
          kind:
            description: 'Identifies the REST resource represented by the given
              object. Servers may infer this from the endpoint the client
              submits requests to. The value must be written in CameCase and cannot be updated.
              To learn more, read the [API Conventions documentation](https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds).'
            type: string
          metadata:
            type: object
          spec:
            description: Defines the desired specification for installing or updating
              Istio.
            properties:
              components:
                properties:
                  cni:
                    description: Defines component configuration for Istio CNI
                      DaemonSet.
                    properties:
                      k8s:
                        description: 'CniK8sConfig is a subset of [KubernetesResourcesSpec](https://istio.io/latest/docs
                          /reference/config/istio.operator.v1alpha1/#KubernetesResourcesSpec).'
                        properties:
                          affinity:
                            description: Represents a group of affinity scheduling
                              rules.
                            properties:
                              nodeAffinity:
                                description: Describes node affinity scheduling rules
                                  for the Pod.
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    description: The scheduler has a preference for 
                                      scheduling Pods to nodes that satisfy the affinity
                                      expressions specified in this field. However, it
                                      may still choose a node that does not meet one or
                                      more of the expressions. The node that is most
                                      preferred is the one with the highest sum of weights.
                                      This sum is calculated by iterating through the
                                      elements in this field and adding a `weight` to
                                      the sum if the node matches the corresponding
                                      matchExpressions (resource request, requiredDuringScheduling
                                      anti-affinity expressions, etc.).
                                    items:
                                      description: An empty preferred scheduling term
                                        matches all objects with implicit weight of 0
                                        (it's a no-op). A null preferred scheduling
                                        term matches no objects (it's also a no-op).
                                      properties:
                                        preference:
                                          description: Specifies a node selector term associated
                                            with the corresponding weight.
                                          properties:
                                            matchExpressions:
                                              description: Represents a list of of requirements 
                                                for selecting nodes based on their labels.
                                              items:
                                                description: A node selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Represents the key's
                                                      relationship to a set of values.
                                                      Valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`, `Gt`, and
                                                      `Lt`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array must be empty.
                                                      If the operator is `Gt` or `Lt`,
                                                      the array must have only one element, 
                                                      which is interpreted as an integer. This
                                                      array is replaced during the strategic
                                                      merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchFields:
                                              description: Represents a list of node 
                                                selector requirements for selecting 
                                                nodes based on their fields.
                                              items:
                                                description: A node selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`, `Gt`, and
                                                      `Lt`.
                                                    type: string
                                                  values:
                                                    description: Representd an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      If the operator is `Gt` or `Lt`,
                                                      the array of values must have only 
                                                      one element, which is interpreted 
                                                      as an integer. This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        weight:
                                          description: Specifies the weight associated 
                                            with the corresponding nodeSelectorTerm.
                                            It must be a value between 1 and 100.
                                          format: int32
                                          type: integer
                                      required:
                                      - preference
                                      - weight
                                      type: object
                                    type: array
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    description: If the affinity requirements specified
                                      in this field are not met at scheduling time,
                                      the Pod is not scheduled onto the node.
                                      If the affinity requirements specified in this
                                      field cease to be met at some point during Pod
                                      execution (for example, due to an update), the 
                                      system may or may not try to eventually evict 
                                      the Pod from its node.
                                    properties:
                                      nodeSelectorTerms:
                                        description: Represents a list of node selector
                                          terms. The terms are combined using `OR`. 
                                          The field is required.
                                        items:
                                          description: A null or empty node selector
                                            term doesn't match any objects. The requirements
                                            are combined using `AND`. TopologySelectorTerm
                                            type implements a subset of NodeSelectorTerm.
                                          properties:
                                            matchExpressions:
                                              description: Represents a list of of requirements 
                                                for selecting nodes based on their labels.
                                              items:
                                                description: A node selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`, `Gt`, and
                                                      `Lt`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      If the operator is `Gt` or `Lt`,
                                                      the array of values must have only 
                                                      one element, which is interpreted 
                                                      as an integer. This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchFields:
                                              description: A list of node selector
                                                requirements by node's fields.
                                              items:
                                                description: A node selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`, `Gt`, and
                                                      `Lt`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      If the operator is `Gt` or `Lt`,
                                                      the array of values must have only 
                                                      one element, which is interpreted 
                                                      as an integer. This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        type: array
                                    required:
                                    - nodeSelectorTerms
                                    type: object
                                    x-kubernetes-map-type: atomic
                                type: object
                              podAffinity:
                                description: Describes affinity scheduling rules
                                  for a Pod (for example, co-locate this Pod in 
                                  the same node, zone, etc. as other Pod(s)).
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    description: The scheduler has a preference for 
                                      scheduling Pods to nodes that satisfy the 
                                      affinity expressions specified in this field. 
                                      However, it may still choose a node that 
                                      does not meet one or more of the expressions. 
                                      The node that is most preferred is the one 
                                      with the highest sum of weights. This sum is 
                                      calculated by iterating through the elements 
                                      in this field and adding a `weight` to the sum 
                                      if the node matches the corresponding matchExpressions 
                                      (resource request,requiredDuringScheduling, 
                                      anti-affinity expressions, etc.).
                                    items:
                                      description: The weights of all of the 
                                        matched **WeightedPodAffinityTerm** fields 
                                        are added per-node to find the most 
                                        preferred node(s).
                                      properties:
                                        podAffinityTerm:
                                          description: Specifies Pod's affinity term
                                            associated with the corresponding weight.
                                            The field is required.
                                          properties:
                                            labelSelector:
                                              description: A label query over a set
                                                of resources, in this case, Pods.
                                              properties:
                                                matchExpressions:
                                                  description: Represents a list of of requirements 
                                                    for selecting nodes based on their labels.
                                                    The requirements are combined using `AND`.
                                                  items:
                                                    description: A label selector
                                                      requirement is a selector that
                                                      contains values, a key, and
                                                      an operator that relates the
                                                      key and values.
                                                    properties:
                                                      key:
                                                        description: Specifies the label key that
                                                          the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Specifies key's
                                                          relationship to a set of values.
                                                          The valid operators are `In`, `NotIn`,
                                                          `Exists`, `DoesNotExist`.
                                                        type: string
                                                      values:
                                                        description: Represents an array of string
                                                          values. If the operator is `In`
                                                          or `NotIn`, the array of values must
                                                          be non-empty. If the operator
                                                          is `Exists` or `DoesNotExist`, the
                                                          array of values must be empty.
                                                          This array is replaced 
                                                          during the strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaceSelector:
                                              description: A label query over the
                                                set of Namespaces. The term is 
                                                applied to the union of Namespaces 
                                                selected by this field and the 
                                                ones listed in the **namespaces**
                                                field. If the selector is null and 
                                                the list of Namespaces is null or 
                                                empty, it means that the term applies 
                                                to the namespace of the current Pod. 
                                                An empty selector ({}) matches all 
                                                Namespaces.
                                              properties:
                                                matchExpressions:
                                                  description: Represents a list of of requirements 
                                                    for selecting nodes based on their labels.
                                                    The requirements are combined using `AND`.
                                                  items:
                                                    description: A label selector
                                                      requirement is a selector that
                                                      contains values, a key, and
                                                      an operator that relates the
                                                      key and values.
                                                    properties:
                                                      key:
                                                        description: Specifies the label key that
                                                          the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Specifies key's
                                                          relationship to a set of values.
                                                          The valid operators are `In`, `NotIn`,
                                                          `Exists`, `DoesNotExist`.
                                                        type: string
                                                      values:
                                                        description: Represents an array of string
                                                          values. If the operator is `In`
                                                          or `NotIn`, the array of values must
                                                          be non-empty. If the operator
                                                          is `Exists` or `DoesNotExist`, the
                                                          array of values must be empty. 
                                                          This array is replaced during the strategic 
                                                          merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaces:
                                              description: A label query over the
                                                set of Namespaces. The term is 
                                                applied to the union of Namespaces 
                                                selected by this field and the 
                                                ones listed in the **namespaces**
                                                field. If the selector is null and 
                                                the list of Namespaces is null or 
                                                empty, it means that the term applies 
                                                to the namespace of the current Pod. 
                                                An empty selector ({}) matches all 
                                                Namespaces.
                                              items:
                                                type: string
                                              type: array
                                            topologyKey:
                                              description: Indicates if the Pod should 
                                                be co-located (affinity) or not co-located 
                                                (anti-affinity) with the Pods matching 
                                                the **labelSelector** in the specified Namespaces. 
                                                "Co-located" means that a Pod runs on a node 
                                                that has a label with a **topologyKey** 
                                                key and a value that is identical as a value 
                                                of any other node on which any of the selected 
                                                Pods is running. The **topologyKey** field 
                                                musn't be empty.
                                              type: string
                                          required:
                                          - topologyKey
                                          type: object
                                        weight:
                                          description: Specifies the weight associated 
                                            with the corresponding podAffinityTerm. 
                                            It must be a value between 1 and 100.
                                          format: int32
                                          type: integer
                                      required:
                                      - podAffinityTerm
                                      - weight
                                      type: object
                                    type: array
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    description: If the affinity requirements specified
                                      by this field are not met at scheduling time,
                                      the pod will not be scheduled onto the node.
                                      If the affinity requirements specified by this
                                      field cease to be met at some point during pod
                                      execution (e.g. due to a pod label update),
                                      the system may or may not try to eventually
                                      evict the pod from its node. When there are
                                      multiple elements, the lists of nodes corresponding
                                      to each podAffinityTerm are intersected, i.e.
                                      all terms must be satisfied.
                                    items:
                                      description: Defines a set of Pods that 
                                        the Pod co-located (affinity) or not 
                                        co-located (anti-affinity) with. The Pods 
                                        in this set are determined by matching 
                                        the labelSelector relative to the given 
                                        Namespace(s). The term "co-located" refers 
                                        to running on a node that has the same value 
                                        for the label with the key **topologyKey** 
                                        as any node on which a Pod in the group 
                                        is running.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set
                                            of resources, in this case, Pods.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                of label selector requirements. The
                                                requirements are combined using `AND`.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      This array is replaced during 
                                                      the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaceSelector:
                                          description: A label query over the
                                            set of Namespaces. The term is 
                                            applied to the union of Namespaces 
                                            selected by this field and the 
                                            ones listed in the **namespaces**
                                            field. If the selector is null and 
                                            the list of Namespaces is null or 
                                            empty, it means that the term applies 
                                            to the namespace of the current Pod. 
                                            An empty selector ({}) matches all 
                                            Namespaces.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                of label selector requirements. The
                                                requirements are combined using `AND`.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array
                                                      of string values. If the operator
                                                      is `In` or `NotIn`, the array of values
                                                      must be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          description: This field specifies a static 
                                            list of Namespace names to which the 
                                            term applies. The term is applied to the 
                                            union of the Namespaces listed in this field 
                                            and the ones selected in the **namespaceSelector** 
                                            field. If the **namespaceSelector** 
                                            is null and the list of Namespaces is 
                                            null or empty, it means that the term applies 
                                            to the Namespace of the current Pod. 
                                            An empty selector ({}) matches all 
                                            Namespaces.
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: Indicates if the Pod should 
                                            be co-located (affinity) or not co-located 
                                            (anti-affinity) with the Pods matching 
                                            the **labelSelector** in the specified Namespaces. 
                                            "Co-located" means that a Pod runs on a node 
                                            that has a label with a **topologyKey** 
                                            key and a value that is identical as a value 
                                            of any other node on which any of the selected 
                                            Pods is running. The **topologyKey** field 
                                            musn't be empty.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    type: array
                                type: object
                              podAntiAffinity:
                                description: Describes Pod anti-affinity scheduling
                                  rules (for example, avoid putting this pod in the same node,
                                  zone, etc. as other Pod(s)).
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    description: The scheduler has a preference for 
                                      scheduling Pods to nodes that satisfy the affinity 
                                      expressions specified in this field. However, it 
                                      may still choose a node that does not meet one or 
                                      more of the expressions. The node that is most 
                                      preferred is the one with the highest sum of weights. 
                                      This sum is calculated by iterating through the 
                                      elements in this field and adding a `weight` to 
                                      the sum if the node matches the corresponding 
                                      matchExpressions (resource request, requiredDuringScheduling 
                                      anti-affinity expressions, etc.).
                                    items:
                                      description: The weights of all of the matched
                                        WeightedPodAffinityTerm fields are added per-node
                                        to find the most preferred node(s)
                                      properties:
                                        podAffinityTerm:
                                          description: Specifies Pod's affinity term
                                            associated with the corresponding weight.
                                            The field is required.
                                          properties:
                                            labelSelector:
                                              description: A label query over a set
                                                of resources, in this case, Pods.
                                              properties:
                                                matchExpressions:
                                                  description: Specifies a list
                                                    of label selector requirements. The
                                                    requirements are combined using `AND`.
                                                  items:
                                                    description: A label selector
                                                      requirement is a selector that
                                                      contains values, a key, and
                                                      an operator that relates the
                                                      key and values.
                                                    properties:
                                                      key:
                                                        description: Specifies the label key that
                                                          the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Specifies key's
                                                          relationship to a set of values.
                                                          The valid operators are `In`, `NotIn`,
                                                          `Exists`, `DoesNotExist`.
                                                        type: string
                                                      values:
                                                        description: Represents an array of string
                                                          values. If the operator is `In`
                                                          or `NotIn`, the array of values must
                                                          be non-empty. If the operator
                                                          is `Exists` or `DoesNotExist`, the
                                                          array of values must be empty. This array 
                                                          is replaced during the strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaceSelector:
                                              description: A label query over the
                                                set of Namespaces. The term is 
                                                applied to the union of Namespaces 
                                                selected by this field and the 
                                                ones listed in the **namespaces**
                                                field. If the selector is null and 
                                                the list of Namespaces is null or 
                                                empty, it means that the term applies 
                                                to the namespace of the current Pod. 
                                                An empty selector ({}) matches all 
                                                Namespaces.
                                              properties:
                                                matchExpressions:
                                                  description: Specifies a list
                                                    of label selector requirements. The
                                                    requirements are combined using `AND`.
                                                  items:
                                                    description: A label selector
                                                      requirement is a selector that
                                                      contains values, a key, and
                                                      an operator that relates the
                                                      key and values.
                                                    properties:
                                                      key:
                                                        description: Specifies the label key that
                                                          the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Specifies key's
                                                          relationship to a set of values.
                                                          The valid operators are `In`, `NotIn`,
                                                          `Exists`, `DoesNotExist`.
                                                        type: string
                                                      values:
                                                        description: Represents an array of string
                                                          values. If the operator is `In`
                                                          or `NotIn`, the array of values must
                                                          be non-empty. If the operator
                                                          is `Exists` or `DoesNotExist`, the
                                                          array of values must be empty. This array 
                                                          is replaced during the strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaces:
                                              description: This field specifies a static 
                                                list of Namespace names to which the 
                                                term applies. The term is applied to the 
                                                union of the Namespaces listed in this field 
                                                and the ones selected in the **namespaceSelector** 
                                                field. If the **namespaceSelector** 
                                                is null and the list of Namespaces is 
                                                null or empty, it means that the term applies 
                                                to the Namespace of the current Pod.
                                              items:
                                                type: string
                                              type: array
                                            topologyKey:
                                              description: Indicates if the Pod should 
                                                be co-located (affinity) or not co-located 
                                                (anti-affinity) with the Pods matching 
                                                the **labelSelector** in the specified Namespaces. 
                                                "Co-located" means that a Pod runs on a node 
                                                that has a label with a **topologyKey** 
                                                key and a value that is identical as a value 
                                                of any other node on which any of the selected 
                                                Pods is running. The **topologyKey** field 
                                                musn't be empty.
                                              type: string
                                          required:
                                          - topologyKey
                                          type: object
                                        weight:
                                          description: Specifies the weight associated 
                                            with the corresponding podAffinityTerm. 
                                            It must be a value between 1 and 100.
                                          format: int32
                                          type: integer
                                      required:
                                      - podAffinityTerm
                                      - weight
                                      type: object
                                    type: array
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    description: If the anti-affinity requirements
                                      specified by this field are not met at scheduling
                                      time, the pod will not be scheduled onto the
                                      node. If the anti-affinity requirements specified
                                      by this field cease to be met at some point
                                      during pod execution (e.g. due to a pod label
                                      update), the system may or may not try to eventually
                                      evict the pod from its node. When there are
                                      multiple elements, the lists of nodes corresponding
                                      to each podAffinityTerm are intersected, i.e.
                                      all terms must be satisfied.
                                    items:
                                      description: Defines a set of Pods that 
                                        the Pod co-located (affinity) or not 
                                        co-located (anti-affinity) with. The Pods 
                                        in this set are determined by matching 
                                        the labelSelector relative to the given 
                                        Namespace(s). The term "co-located" refers 
                                        to running on a node that has the same value 
                                        for the label with the key **topologyKey** 
                                        as any node on which a Pod of the set 
                                        is running.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set
                                            of resources, in this case, Pods.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                of label selector requirements. The
                                                requirements are combined using `AND`.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: Represents a map
                                                of {key,value} pairs. A single
                                                {key,value} in the matchLabels
                                                map is equivalent to the element
                                                of matchExpressions, whose key
                                                field is `key`, the operator is
                                                `In`, and the array of values 
                                                only contains `value`. The 
                                                requirements are combined 
                                                using `AND`.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaceSelector:
                                          description: A label query over the
                                            set of Namespaces. The term is 
                                            applied to the union of Namespaces 
                                            selected by this field and the 
                                            ones listed in the **namespaces**
                                            field. If the selector is null and 
                                            the list of Namespaces is null or 
                                            empty, it means that the term applies 
                                            to the Namespace of the current Pod. 
                                            An empty selector ({}) matches all 
                                            Namespaces.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                of label selector requirements. The
                                                requirements are combined using `AND`.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: Represents a map
                                                of {key,value} pairs. A single
                                                {key,value} in the matchLabels
                                                map is equivalent to the element
                                                of matchExpressions, whose key
                                                field is `key`, the operator is
                                                `In`, and the array of values 
                                                only contains `value`. The 
                                                requirements are combined 
                                                using `AND`.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          description: This field specifies a static 
                                            list of Namespace names to which the 
                                            term applies. The term is applied to the 
                                            union of the Namespaces listed in this field 
                                            and the ones selected in the **namespaceSelector** 
                                            field. If the **namespaceSelector** 
                                            is null and the list of Namespaces is 
                                            null or empty, it means that the term applies 
                                            to the Namespace of the current Pod.
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: Indicates if the Pod should 
                                            be co-located (affinity) or not co-located 
                                            (anti-affinity) with the Pods matching 
                                            the **labelSelector** in the specified Namespaces. 
                                            "Co-located" means that a Pod runs on a node 
                                            that has a label with a **topologyKey** 
                                            key and a value that is identical as a value 
                                            of any other node on which any of the selected 
                                            Pods is running. The **topologyKey** field 
                                            musn't be empty.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    type: array
                                type: object
                            type: object
                          resources:
                            description: 'Resources define Kubernetes resources configuration:
                              https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              limits:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                              requests:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                            type: object
                        type: object
                    required:
                    - k8s
                    type: object
                  ingressGateway:
                    description: IngressGateway defines component configurations for
                      Istio Ingress Gateway
                    properties:
                      k8s:
                        description: KubernetesResourcesConfig is a subset of https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/#KubernetesResourcesSpec
                        properties:
                          hpaSpec:
                            description: HPASpec defines configuration for HorizontalPodAutoscaler
                            properties:
                              maxReplicas:
                                format: int32
                                type: integer
                              minReplicas:
                                format: int32
                                type: integer
                            type: object
                          resources:
                            description: 'Resources define Kubernetes resources configuration:
                              https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              limits:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                              requests:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                            type: object
                          strategy:
                            description: Strategy defines rolling update strategy
                            properties:
                              rollingUpdate:
                                description: 'RollingUpdate defines configuration
                                  for rolling updates: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment'
                                properties:
                                  maxSurge:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    x-kubernetes-int-or-string: true
                                  maxUnavailable:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    x-kubernetes-int-or-string: true
                                type: object
                            required:
                            - rollingUpdate
                            type: object
                        type: object
                    required:
                    - k8s
                    type: object
                  pilot:
                    description: Pilot defines component configuration for Istiod
                    properties:
                      k8s:
                        description: KubernetesResourcesConfig is a subset of https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/#KubernetesResourcesSpec
                        properties:
                          hpaSpec:
                            description: HPASpec defines configuration for HorizontalPodAutoscaler
                            properties:
                              maxReplicas:
                                format: int32
                                type: integer
                              minReplicas:
                                format: int32
                                type: integer
                            type: object
                          resources:
                            description: 'Resources define Kubernetes resources configuration:
                              https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              limits:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                              requests:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                            type: object
                          strategy:
                            description: Strategy defines rolling update strategy
                            properties:
                              rollingUpdate:
                                description: 'RollingUpdate defines configuration
                                  for rolling updates: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment'
                                properties:
                                  maxSurge:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    x-kubernetes-int-or-string: true
                                  maxUnavailable:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    x-kubernetes-int-or-string: true
                                type: object
                            required:
                            - rollingUpdate
                            type: object
                        type: object
                    required:
                    - k8s
                    type: object
                  proxy:
                    description: Proxy defines component configuration for Istio proxy
                      sidecar
                    properties:
                      k8s:
                        description: ProxyK8sConfig is a subset of https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/#KubernetesResourcesSpec
                        properties:
                          resources:
                            description: 'Resources define Kubernetes resources configuration:
                              https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              limits:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                              requests:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                            type: object
                        type: object
                    required:
                    - k8s
                    type: object
                type: object
              config:
                description: Config is the configuration for the Istio installation.
                properties:
                  numTrustedProxies:
                    description: Defines the number of trusted proxies deployed in
                      front of the Istio gateway proxy.
                    type: integer
                type: object
            type: object
          status:
            description: IstioStatus defines the observed state of IstioCR.
            properties:
              conditions:
                description: Includes the conditions associated with IstioStatus.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: Specifies the last time the condition
                        transitioned from one status to another. It should 
                        be the time when the underlying condition changed.  
                        If that is not known, then it is acceptable to use
                        the time when the API field changed.
                      format: date-time
                      type: string
                    message:
                      description: Contains a human-readable message providing
                        details about the transition. It can be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: Represents the **.metadata.generation**
                        that was used to set the condition. For example, 
                        f **.metadata.generation** is currently 12, but 
                        the **.status.conditions[x].observedGeneration**
                        is 9, the condition is not up-to-date with the 
                        current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: Contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field must not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: Specifies the status of the condition. 
                        The stats is either `True`, `False`, or `Unknown`.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: Specifies the type of condition 
                        in CamelCase or in foo.example.com/CamelCase.
                        Many **.condition.type** values are consistent 
                        across all resources (for example, `Available`), 
                        but because arbitrary conditions can be useful
                        (see **.node.status.conditions**), the ability 
                        to deconflict is important. The regex it matches 
                        is `(dns1123SubdomainFmt/)?(qualifiedNameFmt)`.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              state:
                description: Signifies the current state of CustomObject. 
                  Its value is either `Ready`, `Processing`, `Error`, 
                  or `Deleting`.
                enum:
                - Processing
                - Deleting
                - Ready
                - Error
                type: string
            required:
            - state
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: Contains Istio CR specification and current status.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Defines the desired specification for installing or updating
              Istio.
            properties:
              components:
                properties:
                  cni:
                    description: Defines component configuration for Istio CNI
                      DaemonSet.
                    properties:
                      k8s:
                        description: CniK8sConfig is a subset of https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/#KubernetesResourcesSpec
                        properties:
                          affinity:
                            description: Affinity is a group of affinity scheduling
                              rules.
                            properties:
                              nodeAffinity:
                                description: Describes node affinity scheduling rules
                                  for the Pod.
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    description: The scheduler has a preference for 
                                      scheduling Pods to nodes that satisfy the affinity 
                                      expressions specified in this field. However, it 
                                      may still choose a node that does not meet one or 
                                      more of the expressions. The node that is most 
                                      preferred is the one with the highest sum of weights. 
                                      This sum is calculated by iterating through the 
                                      elements in this field and adding a `weight` to 
                                      the sum if the node matches the corresponding 
                                      matchExpressions (resource request, requiredDuringScheduling 
                                      anti-affinity expressions, etc.).
                                    items:
                                      description: An empty preferred scheduling term
                                        matches all objects with implicit weight 0
                                        (i.e. it's a no-op). A null preferred scheduling
                                        term matches no objects (i.e. is also a no-op).
                                      properties:
                                        preference:
                                          description: A node selector term, associated
                                            with the corresponding weight.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                requirements for selecting nodes based
                                                on their labels. The requirements are 
                                                combined using `AND`.
                                              items:
                                                description: A node selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      If the operator is `Gt` or `Lt`,
                                                      the array of values must have only 
                                                      one element, which is interpreted 
                                                      as an integer. This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchFields:
                                              description: A list of node selector
                                                requirements by node's fields.
                                              items:
                                                description: A node selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`, `Gt`, and
                                                      `Lt`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      If the operator is `Gt` or `Lt`,
                                                      the array of values must have only 
                                                      one element, which is interpreted 
                                                      as an integer. This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        weight:
                                          description: Specifies the weight associated 
                                            with the corresponding nodeSelectorTerm.
                                            It must be a value between 1 and 100.
                                          format: int32
                                          type: integer
                                      required:
                                      - preference
                                      - weight
                                      type: object
                                    type: array
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    description: If the affinity requirements specified
                                      by this field are not met at scheduling time,
                                      the pod will not be scheduled onto the node.
                                      If the affinity requirements specified by this
                                      field cease to be met at some point during pod
                                      execution (e.g. due to an update), the system
                                      may or may not try to eventually evict the pod
                                      from its node.
                                    properties:
                                      nodeSelectorTerms:
                                        description: Represents a list of node selector
                                          terms. The terms are combined using `OR`. 
                                          The field is required.
                                        items:
                                          description: A null or empty node selector
                                            term doesn't match any objects. The requirements
                                            are combined using `AND`. TopologySelectorTerm
                                            type implements a subset of NodeSelectorTerm.
                                          properties:
                                            matchExpressions:
                                              description: Represents a list of of requirements 
                                                for selecting nodes based on their labels.
                                                The requirements are combined using `AND`.
                                              items:
                                                description: A node selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`, `Gt`, and
                                                      `Lt`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      If the operator is `Gt` or `Lt`,
                                                      the array of values must have only 
                                                      one element, which is interpreted 
                                                      as an integer. This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchFields:
                                              description: A list of node selector
                                                requirements by node's fields.
                                              items:
                                                description: A node selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`, `Gt`, and
                                                      `Lt`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      If the operator is `Gt` or `Lt`,
                                                      the array of values must have only 
                                                      one element, which is interpreted 
                                                      as an integer. This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        type: array
                                    required:
                                    - nodeSelectorTerms
                                    type: object
                                    x-kubernetes-map-type: atomic
                                type: object
                              podAffinity:
                                description: Describes affinity scheduling rules
                                  for a Pod (for example, co-locate this Pod in 
                                  the same node, zone, etc. as other Pod(s)).
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    description: The scheduler has a preference for 
                                      scheduling Pods to nodes that satisfy the affinity 
                                      expressions specified in this field. However, it 
                                      may still choose a node that does not meet one or 
                                      more of the expressions. The node that is most 
                                      preferred is the one with the highest sum of weights. 
                                      This sum is calculated by iterating through the 
                                      elements in this field and adding a `weight` to 
                                      the sum if the node matches the corresponding 
                                      matchExpressions (resource request, requiredDuringScheduling 
                                      anti-affinity expressions, etc.).
                                    items:
                                      description: The weights of all of the matched
                                        WeightedPodAffinityTerm fields are added per-node
                                        to find the most preferred node(s)
                                      properties:
                                        podAffinityTerm:
                                          description: Specifies Pod's affinity term
                                            associated with the corresponding weight.
                                            The field is required.
                                          properties:
                                            labelSelector:
                                              description: A label query over a set
                                                of resources, in this case, Pods.
                                              properties:
                                                matchExpressions:
                                                  description: Specifies a list
                                                    of label selector requirements. The
                                                    requirements are combined using `AND`.
                                                  items:
                                                    description: A label selector
                                                      requirement is a selector that
                                                      contains values, a key, and
                                                      an operator that relates the
                                                      key and values.
                                                    properties:
                                                      key:
                                                        description: Specifies the label key that
                                                          the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Specifies key's
                                                          relationship to a set of values.
                                                          The valid operators are `In`, `NotIn`,
                                                          `Exists`, `DoesNotExist`.
                                                        type: string
                                                      values:
                                                        description: Represents an array of string
                                                          values. If the operator is `In`
                                                          or `NotIn`, the array of values must
                                                          be non-empty. If the operator
                                                          is `Exists` or `DoesNotExist`, the
                                                          array of values must be empty.
                                                          This array is replaced 
                                                          during the strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaceSelector:
                                              description: A label query over the
                                                set of Namespaces. The term is 
                                                applied to the union of Namespaces 
                                                selected by this field and the 
                                                ones listed in the **namespaces**
                                                field. If the selector is null and 
                                                the list of Namespaces is null or 
                                                empty, it means that the term applies 
                                                to the namespace of the current Pod. 
                                                An empty selector ({}) matches all 
                                                Namespaces.
                                              properties:
                                                matchExpressions:
                                                  description: Specifies a list
                                                    of label selector requirements. The
                                                    requirements are combined using `AND`.
                                                  items:
                                                    description: A label selector
                                                      requirement is a selector that
                                                      contains values, a key, and
                                                      an operator that relates the
                                                      key and values.
                                                    properties:
                                                      key:
                                                        description: Specifies the label key that
                                                          the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Specifies key's
                                                          relationship to a set of values.
                                                          The valid operators are `In`, `NotIn`,
                                                          `Exists`, `DoesNotExist`.
                                                        type: string
                                                      values:
                                                        description: Represents an array of string
                                                          values. If the operator is `In`
                                                          or `NotIn`, the array of values must
                                                          be non-empty. If the operator
                                                          is `Exists` or `DoesNotExist`, the
                                                          array of values must be empty.
                                                          This array is replaced 
                                                          during the strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaces:
                                              description: This field specifies a static 
                                                list of Namespace names to which the 
                                                term applies. The term is applied to the 
                                                union of the Namespaces listed in this field 
                                                and the ones selected in the **namespaceSelector** 
                                                field. If the **namespaceSelector** 
                                                is null and the list of Namespaces is 
                                                null or empty, it means that the term applies 
                                                to the Namespace of the current Pod.
                                              items:
                                                type: string
                                              type: array
                                            topologyKey:
                                              description: Indicates if the Pod should 
                                                be co-located (affinity) or not co-located 
                                                (anti-affinity) with the Pods matching 
                                                the **labelSelector** in the specified Namespaces. 
                                                "Co-located" means that a Pod runs on a node 
                                                that has a label with a **topologyKey** 
                                                key and a value that is identical as a value 
                                                of any other node on which any of the selected 
                                                Pods is running. The **topologyKey** field 
                                                musn't be empty.
                                              type: string
                                          required:
                                          - topologyKey
                                          type: object
                                        weight:
                                          description: Specifies the weight associated 
                                            with the corresponding podAffinityTerm. 
                                            It must be a value between 1 and 100.
                                          format: int32
                                          type: integer
                                      required:
                                      - podAffinityTerm
                                      - weight
                                      type: object
                                    type: array
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    description: If the affinity requirements specified
                                      by this field are not met at scheduling time,
                                      the pod will not be scheduled onto the node.
                                      If the affinity requirements specified by this
                                      field cease to be met at some point during pod
                                      execution (e.g. due to a pod label update),
                                      the system may or may not try to eventually
                                      evict the pod from its node. When there are
                                      multiple elements, the lists of nodes corresponding
                                      to each podAffinityTerm are intersected, i.e.
                                      all terms must be satisfied.
                                    items:
                                      description: Defines a set of Pods that 
                                        the Pod co-located (affinity) or not 
                                        co-located (anti-affinity) with. The Pods 
                                        in this set are determined by matching 
                                        the labelSelector relative to the given 
                                        Namespace(s). The term "co-located" refers 
                                        to running on a node that has the same value 
                                        for the label with the key **topologyKey** 
                                        as any node on which a Pod of the set 
                                        is running.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set
                                            of resources, in this case, Pods.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                of label selector requirements. The
                                                requirements are combined using `AND`.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: Represents a map
                                                of {key,value} pairs. A single
                                                {key,value} in the matchLabels
                                                map is equivalent to the element
                                                of matchExpressions, whose key
                                                field is `key`, the operator is
                                                `In`, and the array of values 
                                                only contains `value`. The 
                                                requirements are combined 
                                                using `AND`.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaceSelector:
                                          description: A label query over the
                                            set of Namespaces. The term is 
                                            applied to the union of Namespaces 
                                            selected by this field and the 
                                            ones listed in the **namespaces**
                                            field. If the selector is null and 
                                            the list of Namespaces is null or 
                                            empty, it means that the term applies 
                                            to the namespace of the current Pod. 
                                            An empty selector ({}) matches all 
                                            Namespaces.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                of label selector requirements. The
                                                requirements are combined using `AND`.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: Represents a map
                                                of {key,value} pairs. A single
                                                {key,value} in the matchLabels
                                                map is equivalent to the element
                                                of matchExpressions, whose key
                                                field is `key`, the operator is
                                                `In`, and the array of values 
                                                only contains `value`. The 
                                                requirements are combined 
                                                using `AND`.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          description: This field specifies a static 
                                            list of Namespace names to which the 
                                            term applies. The term is applied to the 
                                            union of the Namespaces listed in this field 
                                            and the ones selected in the **namespaceSelector** 
                                            field. If the **namespaceSelector** 
                                            is null and the list of Namespaces is 
                                            null or empty, it means that the term applies 
                                            to the Namespace of the current Pod.
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: Indicates if the Pod should 
                                            be co-located (affinity) or not co-located 
                                            (anti-affinity) with the Pods matching 
                                            the **labelSelector** in the specified Namespaces. 
                                            "Co-located" means that a Pod runs on a node 
                                            that has a label with a **topologyKey** 
                                            key and a value that is identical as a value 
                                            of any other node on which any of the selected 
                                            Pods is running. The **topologyKey** field 
                                            musn't be empty.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    type: array
                                type: object
                              podAntiAffinity:
                                description: Describes pod anti-affinity scheduling
                                  rules (e.g. avoid putting this pod in the same node,
                                  zone, etc. as some other pod(s)).
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    description: The scheduler has a preference for 
                                      scheduling Pods to nodes that satisfy the affinity 
                                      expressions specified in this field. However, it 
                                      may still choose a node that does not meet one or 
                                      more of the expressions. The node that is most 
                                      preferred is the one with the highest sum of weights. 
                                      This sum is calculated by iterating through the 
                                      elements in this field and adding a `weight` to 
                                      the sum if the node matches the corresponding 
                                      matchExpressions (resource request, requiredDuringScheduling 
                                      anti-affinity expressions, etc.).
                                    items:
                                      description: The weights of all of the matched
                                        WeightedPodAffinityTerm fields are added per-node
                                        to find the most preferred node(s).
                                      properties:
                                        podAffinityTerm:
                                          description: Specifies Pod's affinity term
                                            associated with the corresponding weight.
                                            The field is required.
                                          properties:
                                            labelSelector:
                                              description: A label query over a set
                                                of resources, in this case, Pods.
                                              properties:
                                                matchExpressions:
                                                  description: Specifies a list
                                                    of label selector requirements. The
                                                    requirements are combined using `AND`.
                                                  items:
                                                    description: A label selector
                                                      requirement is a selector that
                                                      contains values, a key, and
                                                      an operator that relates the
                                                      key and values.
                                                    properties:
                                                      key:
                                                        description: Specifies the label key that
                                                          the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Specifies key's
                                                          relationship to a set of values.
                                                          The valid operators are `In`, `NotIn`,
                                                          `Exists`, `DoesNotExist`.
                                                        type: string
                                                      values:
                                                        description: Represents an array of string
                                                          values. If the operator is `In`
                                                          or `NotIn`, the array of values must
                                                          be non-empty. If the operator
                                                          is `Exists` or `DoesNotExist`, the
                                                          array of values must be empty.
                                                          This array is replaced 
                                                          during the strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: Represents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaceSelector:
                                              description: A label query over the
                                                set of Namespaces. The term is 
                                                applied to the union of Namespaces 
                                                selected by this field and the 
                                                ones listed in the **namespaces**
                                                field. If the selector is null and 
                                                the list of Namespaces is null or 
                                                empty, it means that the term applies 
                                                to the namespace of the current Pod. 
                                                An empty selector ({}) matches all 
                                                Namespaces.
                                              properties:
                                                matchExpressions:
                                                  description: Specifies a list
                                                    of label selector requirements. The
                                                    requirements are combined using `AND`.
                                                  items:
                                                    description: A label selector
                                                      requirement is a selector that
                                                      contains values, a key, and
                                                      an operator that relates the
                                                      key and values.
                                                    properties:
                                                      key:
                                                        description: Specifies the label key that
                                                          the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Specifies key's
                                                          relationship to a set of values.
                                                          The valid operators are `In`, `NotIn`,
                                                          `Exists`, `DoesNotExist`.
                                                        type: string
                                                      values:
                                                        description: Represents an array of string
                                                          values. If the operator is `In`
                                                          or `NotIn`, the array of values must
                                                          be non-empty. If the operator
                                                          is `Exists` or `DoesNotExist`, the
                                                          array of values must be empty.
                                                          This array is replaced 
                                                          during the strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: mRepresents a map
                                                    of {key,value} pairs. A single
                                                    {key,value} in the matchLabels
                                                    map is equivalent to the element
                                                    of matchExpressions, whose key
                                                    field is `key`, the operator is
                                                    `In`, and the array of values 
                                                    only contains `value`. The 
                                                    requirements are combined 
                                                    using `AND`.
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaces:
                                              description: This field specifies a static 
                                                list of Namespace names to which the 
                                                term applies. The term is applied to the 
                                                union of the Namespaces listed in this field 
                                                and the ones selected in the **namespaceSelector** 
                                                field. If the **namespaceSelector** 
                                                is null and the list of Namespaces is 
                                                null or empty, it means that the term applies 
                                                to the Namespace of the current Pod.
                                              items:
                                                type: string
                                              type: array
                                            topologyKey:
                                              description: Indicates if the Pod should 
                                                be co-located (affinity) or not co-located 
                                                (anti-affinity) with the Pods matching 
                                                the **labelSelector** in the specified Namespaces. 
                                                "Co-located" means that a Pod runs on a node 
                                                that has a label with a **topologyKey** 
                                                key and a value that is identical as a value 
                                                of any other node on which any of the selected 
                                                Pods is running. The **topologyKey** field 
                                                musn't be empty.
                                              type: string
                                          required:
                                          - topologyKey
                                          type: object
                                        weight:
                                          description: Specifies the weight associated 
                                            with the corresponding podAffinityTerm. 
                                            It must be a value between 1 and 100.
                                          format: int32
                                          type: integer
                                      required:
                                      - podAffinityTerm
                                      - weight
                                      type: object
                                    type: array
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    description: If the anti-affinity requirements
                                      specified by this field are not met at scheduling
                                      time, the pod will not be scheduled onto the
                                      node. If the anti-affinity requirements specified
                                      by this field cease to be met at some point
                                      during pod execution (e.g. due to a pod label
                                      update), the system may or may not try to eventually
                                      evict the pod from its node. When there are
                                      multiple elements, the lists of nodes corresponding
                                      to each podAffinityTerm are intersected, i.e.
                                      all terms must be satisfied.
                                    items:
                                      description: Defines a set of Pods that 
                                        the Pod co-located (affinity) or not 
                                        co-located (anti-affinity) with. The Pods 
                                        in this set are determined by matching 
                                        the labelSelector relative to the given 
                                        Namespace(s). The term "co-located" refers 
                                        to running on a node that has the same value 
                                        for the label with the key **topologyKey** 
                                        as any node on which a Pod of the set 
                                        is running.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set
                                            of resources, in this case, Pods.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                of label selector requirements. The
                                                requirements are combined using `AND`.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: Represents a map
                                                of {key,value} pairs. A single
                                                {key,value} in the matchLabels
                                                map is equivalent to the element
                                                of matchExpressions, whose key
                                                field is `key`, the operator is
                                                `In`, and the array of values 
                                                only contains `value`. The 
                                                requirements are combined 
                                                using `AND`.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaceSelector:
                                          description: A label query over the
                                            set of Namespaces. The term is 
                                            applied to the union of Namespaces 
                                            selected by this field and the 
                                            ones listed in the **namespaces**
                                            field. If the selector is null and 
                                            the list of Namespaces is null or 
                                            empty, it means that the term applies 
                                            to the namespace of the current Pod. 
                                            An empty selector ({}) matches all 
                                            Namespaces.
                                          properties:
                                            matchExpressions:
                                              description: Specifies a list
                                                of label selector requirements. The
                                                requirements are combined using `AND`.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: Specifies the label key that
                                                      the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: Specifies key's
                                                      relationship to a set of values.
                                                      The valid operators are `In`, `NotIn`,
                                                      `Exists`, `DoesNotExist`.
                                                    type: string
                                                  values:
                                                    description: Represents an array of string
                                                      values. If the operator is `In`
                                                      or `NotIn`, the array of values must
                                                      be non-empty. If the operator
                                                      is `Exists` or `DoesNotExist`, the
                                                      array of values must be empty.
                                                      This array is replaced 
                                                      during the strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: Represents a map
                                                of {key,value} pairs. A single
                                                {key,value} in the matchLabels
                                                map is equivalent to the element
                                                of matchExpressions, whose key
                                                field is `key`, the operator is
                                                `In`, and the array of values 
                                                only contains `value`. The 
                                                requirements are combined 
                                                using `AND`.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          description: This field specifies a static 
                                            list of Namespace names to which the 
                                            term applies. The term is applied to the 
                                            union of the Namespaces listed in this field 
                                            and the ones selected in the **namespaceSelector** 
                                            field. If the **namespaceSelector** 
                                            is null and the list of Namespaces is 
                                            null or empty, it means that the term applies 
                                            to the Namespace of the current Pod.
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: Indicates if the Pod should 
                                            be co-located (affinity) or not co-located 
                                            (anti-affinity) with the Pods matching 
                                            the **labelSelector** in the specified Namespaces. 
                                            "Co-located" means that a Pod runs on a node 
                                            that has a label with a **topologyKey** 
                                            key and a value that is identical as a value 
                                            of any other node on which any of the selected 
                                            Pods is running. The **topologyKey** field
                                            musn't be empty.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    type: array
                                type: object
                            type: object
                          resources:
                            description: 'Resources define Kubernetes resources configuration:
                              https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              limits:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                              requests:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                            type: object
                        type: object
                    required:
                    - k8s
                    type: object
                  ingressGateway:
                    description: IngressGateway defines component configurations for
                      Istio Ingress Gateway
                    properties:
                      k8s:
                        description: KubernetesResourcesConfig is a subset of https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/#KubernetesResourcesSpec
                        properties:
                          hpaSpec:
                            description: HPASpec defines configuration for HorizontalPodAutoscaler
                            properties:
                              maxReplicas:
                                format: int32
                                type: integer
                              minReplicas:
                                format: int32
                                type: integer
                            type: object
                          resources:
                            description: 'Resources define Kubernetes resources configuration:
                              https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              limits:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                              requests:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                            type: object
                          strategy:
                            description: Strategy defines rolling update strategy
                            properties:
                              rollingUpdate:
                                description: 'RollingUpdate defines configuration
                                  for rolling updates: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment'
                                properties:
                                  maxSurge:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    x-kubernetes-int-or-string: true
                                  maxUnavailable:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    x-kubernetes-int-or-string: true
                                type: object
                            required:
                            - rollingUpdate
                            type: object
                        type: object
                    required:
                    - k8s
                    type: object
                  pilot:
                    description: Pilot defines component configuration for Istiod
                    properties:
                      k8s:
                        description: KubernetesResourcesConfig is a subset of https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/#KubernetesResourcesSpec
                        properties:
                          hpaSpec:
                            description: HPASpec defines configuration for HorizontalPodAutoscaler
                            properties:
                              maxReplicas:
                                format: int32
                                type: integer
                              minReplicas:
                                format: int32
                                type: integer
                            type: object
                          resources:
                            description: 'Resources define Kubernetes resources configuration:
                              https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              limits:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                              requests:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                            type: object
                          strategy:
                            description: Strategy defines rolling update strategy
                            properties:
                              rollingUpdate:
                                description: 'RollingUpdate defines configuration
                                  for rolling updates: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment'
                                properties:
                                  maxSurge:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    x-kubernetes-int-or-string: true
                                  maxUnavailable:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    x-kubernetes-int-or-string: true
                                type: object
                            required:
                            - rollingUpdate
                            type: object
                        type: object
                    required:
                    - k8s
                    type: object
                  proxy:
                    description: Proxy defines component configuration for Istio proxy
                      sidecar
                    properties:
                      k8s:
                        description: ProxyK8sConfig is a subset of https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/#KubernetesResourcesSpec
                        properties:
                          resources:
                            description: 'Resources define Kubernetes resources configuration:
                              https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              limits:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                              requests:
                                properties:
                                  cpu:
                                    type: string
                                  memory:
                                    type: string
                                type: object
                            type: object
                        type: object
                    required:
                    - k8s
                    type: object
                type: object
              config:
                description: Config is the configuration for the Istio installation.
                properties:
                  numTrustedProxies:
                    description: Defines the number of trusted proxies deployed in
                      front of the Istio gateway proxy.
                    type: integer
                type: object
            type: object
          status:
            description: IstioStatus defines the observed state of IstioCR.
            properties:
              conditions:
                description: Includes the conditions associated with IstioStatus.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: Specifies the last time the condition
                        transitioned from one status to another. It should 
                        be the time when the underlying condition changed.  
                        If that is not known, then it is acceptable to use
                        the time when the API field changed.
                      format: date-time
                      type: string
                    message:
                      description: Contains a human-readable message providing
                        details about the transition. It can be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: Represents the **.metadata.generation**
                        that was used to set the condition. For example, 
                        f **.metadata.generation** is currently 12, but 
                        the **.status.conditions[x].observedGeneration**
                        is 9, the condition is not up-to-date with the 
                        current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: Contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field must not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: Specifies the type of condition 
                        in CamelCase or in foo.example.com/CamelCase.
                        Many **.condition.type** values are consistent 
                        across all resources (for example, `Available`), 
                        but because arbitrary conditions can be useful
                        (see **.node.status.conditions**), the ability 
                        to deconflict is important. The regex it matches 
                        is `(dns1123SubdomainFmt/)?(qualifiedNameFmt)`.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              state:
                description: Signifies the current state of CustomObject. 
                  Its value is either `Ready`, `Processing`, `Error`, 
                  or `Deleting`.
                enum:
                - Processing
                - Deleting
                - Ready
                - Error
                type: string
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
