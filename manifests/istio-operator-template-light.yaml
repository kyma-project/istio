apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: default-operator
  namespace: istio-system
spec:
  components:
    base:
      enabled: true
    cni:
      enabled: true
      namespace: istio-system
      k8s:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - istio-cni-node
                  topologyKey: kubernetes.io/hostname
                weight: 100
        resources:
          limits:
            cpu: 250m
            memory: 384Mi
          requests:
            cpu: 10m
            memory: 128Mi
    egressGateways:
    - enabled: false
      k8s:
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 10m
            memory: 120Mi
      name: istio-egressgateway
    ingressGateways:
    - enabled: true
      k8s:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - istio-ingressgateway
                  topologyKey: kubernetes.io/hostname
                weight: 100
        hpaSpec:
          maxReplicas: 5
          minReplicas: 1
        resources:
          limits:
            cpu: 1000m
            memory: 1024Mi
          requests:
            cpu: 10m
            memory: 32Mi
        securityContext:
          runAsGroup: "65534"
          runAsNonRoot: true
          runAsUser: "65534"
          seccompProfile:
            type: RuntimeDefault
        strategy:
          rollingUpdate:
            maxSurge: 100%
            maxUnavailable: 0
      name: istio-ingressgateway
    istiodRemote:
      enabled: false
    pilot:
      enabled: true
      k8s:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - istiod
                topologyKey: kubernetes.io/hostname
              weight: 100
        env:
        - name: PILOT_HTTP10
          value: "1"
        hpaSpec:
          maxReplicas: 1
          minReplicas: 1
        podAnnotations:
          istios.operator.kyma-project.io/managed-by-disclaimer: |
            DO NOT EDIT - This resource is managed by Kyma.
            Any modifications are discarded and the resource is reverted to the original state.
        resources:
          limits:
            cpu: 1000m
            memory: 1024Mi
          requests:
            cpu: 50m
            memory: 128Mi
        securityContext:
          runAsGroup: "65534"
          runAsNonRoot: true
          runAsUser: "65534"
          seccompProfile:
            type: RuntimeDefault
        serviceAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "15014"
          istios.operator.kyma-project.io/managed-by-disclaimer: |
            DO NOT EDIT - This resource is managed by Kyma.
            Any modifications are discarded and the resource is reverted to the original state.
  hub: europe-docker.pkg.dev/kyma-project/prod/external/istio
  meshConfig:
    defaultConfig:
      holdApplicationUntilProxyStarts: true
      proxyMetadata: {}
    defaultProviders:
      tracing: []
    enablePrometheusMerge: false
    enableTracing: false
    extensionProviders:
    - name: kyma-traces
      opencensus:
        context:
        - W3C_TRACE_CONTEXT
        port: 55678
        service: telemetry-trace-collector-internal.kyma-system.svc.cluster.local
    - envoyFileAccessLog:
        logFormat:
          labels: {}
        path: /dev/stdout
      name: envoy
    - envoyFileAccessLog:
        logFormat:
          labels:
            start_time: "%START_TIME%"
            method: "%REQ(:METHOD)%"
            path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
            protocol: "%PROTOCOL%"
            response_code: "%RESPONSE_CODE%"
            response_flags: "%RESPONSE_FLAGS%"
            response_code_details: "%RESPONSE_CODE_DETAILS%"
            connection_termination_details: "%CONNECTION_TERMINATION_DETAILS%"
            upstream_transport_failure_reason: "%CONNECTION_TERMINATION_DETAILS%"
            bytes_received: "%BYTES_RECEIVED%"
            bytes_sent: "%BYTES_SENT%"
            duration: "%DURATION%"
            upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
            x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
            user_agent: "%REQ(USER-AGENT)%"
            request_id: "%REQ(X-REQUEST-ID)%"
            authority: "%REQ(:AUTHORITY)%"
            upstream_host: "%UPSTREAM_HOST%"
            upstream_cluster: "%UPSTREAM_CLUSTER%"
            upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
            downstream_local_address: "%DOWNSTREAM_LOCAL_ADDRESS%"
            downstream_remote_address: "%DOWNSTREAM_REMOTE_ADDRESS%"
            requested_server_name: "%REQUESTED_SERVER_NAME%"
            route_name: "%ROUTE_NAME%"
            traceparent: "%REQ(TRACEPARENT)%"
            tracestate: "%REQ(TRACESTATE)%"
        path: /dev/stdout
      name: stdout-json
    trustDomain: cluster.local
  profile: default
  tag: "{{ .IstioVersion }}-{{ .IstioImageBase }}"
  values:
    base:
      enableCRDTemplates: false
      validationURL: ""
    cni:
      cniBinDir: /opt/cni/bin
      cniConfDir: /etc/cni/net.d
    defaultRevision: ""
    gateways:
      istio-egressgateway:
        autoscaleEnabled: true
        env: {}
        name: istio-egressgateway
        secretVolumes:
        - mountPath: /etc/istio/egressgateway-certs
          name: egressgateway-certs
          secretName: istio-egressgateway-certs
        - mountPath: /etc/istio/egressgateway-ca-certs
          name: egressgateway-ca-certs
          secretName: istio-egressgateway-ca-certs
        type: ClusterIP
      istio-ingressgateway:
        autoscaleEnabled: false
        env: {}
        name: istio-ingressgateway
        podAnnotations:
          istios.operator.kyma-project.io/managed-by-disclaimer: |
            DO NOT EDIT - This resource is managed by Kyma.
            Any modifications are discarded and the resource is reverted to the original state.
        secretVolumes:
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          secretName: istio-ingressgateway-certs
        - mountPath: /etc/istio/ingressgateway-ca-certs
          name: ingressgateway-ca-certs
          secretName: istio-ingressgateway-ca-certs
        serviceAnnotations:
          dns.gardener.cloud/class: garden
          service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "4000"
          istios.operator.kyma-project.io/managed-by-disclaimer: |
            DO NOT EDIT - This resource is managed by Kyma.
            Any modifications are discarded and the resource is reverted to the original state.
        type: LoadBalancer
    global:
      configValidation: true
      defaultNodeSelector: {}
      defaultPodDisruptionBudget:
        enabled: false
      defaultResources:
        requests:
          cpu: 10m
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      istioNamespace: istio-system
      istiod:
        enableAnalysis: false
      jwtPolicy: third-party-jwt
      logAsJson: false
      logging:
        level: all:warn
      meshNetworks: {}
      mountMtlsCerts: false
      multiCluster:
        clusterName: ""
        enabled: false
      network: ""
      omitSidecarInjectorConfigMap: false
      oneNamespace: false
      operatorManageWebhooks: false
      pilotCertProvider: istiod
      priorityClassName: istio-kyma-priority
      proxy:
        autoInject: enabled
        clusterDomain: cluster.local
        componentLogLevel: misc:error
        enableCoreDump: false
        excludeIPRanges: ""
        excludeInboundPorts: ""
        excludeOutboundPorts: ""
        image: proxyv2
        includeIPRanges: '*'
        logLevel: warning
        privileged: false
        readinessFailureThreshold: 40
        readinessInitialDelaySeconds: 5
        readinessPeriodSeconds: 5
        resources:
          limits:
            cpu: 250m
            memory: 254Mi
          requests:
            cpu: 10m
            memory: 32Mi
        statusPort: 15020
        tracer: zipkin
      proxy_init:
        image: proxyv2
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
      sds:
        token:
          aud: istio-ca
      sts:
        servicePort: 0
      tracer:
        datadog: {}
        lightstep: {}
        stackdriver: {}
        zipkin: {}
      useMCP: false
    istiodRemote:
      injectionURL: ""
    pilot:
      autoscaleEnabled: false
      autoscaleMax: 5
      autoscaleMin: 1
      configMap: true
      cpu:
        targetAverageUtilization: 80
      deploymentLabels: null
      enableProtocolSniffingForInbound: true
      enableProtocolSniffingForOutbound: true
      env: {}
      image: pilot
      keepaliveMaxServerConnectionAge: 30m
      nodeSelector: {}
      podLabels: {}
      replicaCount: 1
      traceSampling: 1
    sidecarInjectorWebhook:
      enableNamespacesByDefault: false
      objectSelector:
        autoInject: true
        enabled: false
      rewriteAppHTTPProbe: true
    telemetry:
      enabled: true
      v2:
        enabled: true
        metadataExchange:
          wasmEnabled: false
        prometheus:
          enabled: true
          wasmEnabled: false
        stackdriver:
          configOverride: {}
          enabled: false
          logging: false
          monitoring: false
          topology: false
