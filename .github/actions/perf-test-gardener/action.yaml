name: 'Performance tests (Gardener)'
description: 'Runs performance tests on Gardener'
inputs:
  manager_image:
    description: "Manager image used for test"
    required: true
  gardener_secret:
    description: "Kubeconfig secret for Gardener"
    required: true
  gardener_provider:
    description: "Gardener provider to use"
    required: true
  gardener_project_name:
    required: true
    description: "Name of the gardener project"

runs:
  using: "composite"
  steps:
    - name: Generate cluster name
      shell: bash
      run: echo CLUSTER_NAME=istio-$(echo $RANDOM | md5sum | head -c 7) >> $GITHUB_ENV
    - uses: actions/setup-go@v5
      with:
        go-version-file: "go.mod"
    - name: Prepare gardener kubeconfig
      shell: bash
      env:
        GARDENER_TOKEN: ${{ inputs.gardener_secret }}
      run: "${{ github.workspace }}/hack/ci/scripts-v2/gardener_kubeconfig.sh"
    - name: Provision cluster
      shell: bash
      env:
        GARDENER_KUBECONFIG: "${{ github.workspace }}/gardener_kubeconfig.yaml"
        CLUSTER_KUBECONFIG: "${{ github.workspace }}/${{ env.CLUSTER_NAME }}_kubeconfig.yaml"
        GARDENER_PROVIDER: ${{ inputs.gardener_provider }}
        GARDENER_PROJECT_NAME: ${{ inputs.gardener_project_name }}
        PIPELINE_LINK: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}
      run: "${{ github.workspace }}/hack/ci/scripts-v2/provision-gardener.sh"
    - name: Run performance tests
      shell: bash
      env:
        IMG: ${{ inputs.manager_image }}
        CLUSTER_KUBECONFIG: "${{ github.workspace }}/${{ env.CLUSTER_NAME }}_kubeconfig.yaml"
      run: EXPORT_RESULT=true "${{ github.workspace }}/hack/ci/scripts-v2/performance-test-gardener.sh"
    - uses: actions/upload-artifact@v4
      if: always()
      name: Export no sidecar summary
      with:
        name: no-sidecar
        path: tests/performance/summary-no-sidecar.html
    - uses: actions/upload-artifact@v4
      if: always()
      name: Export sidecar summary
      with:
        name: sidecar
        path: tests/performance/summary-sidecar.html
    - name: Check threshold breaches on test without sidecar
      if: always()
      shell: bash
      run: |
        echo "Reading summary-no-sidecar.html..."
        file_content=$(cat tests/performance/summary-no-sidecar.html)
        echo "Zawartość pliku:"
        echo "$file_content"
        grep_result=$(echo "$file_content" | grep "<h4>Breached Thresholds</h4>" -A1)
        echo "Wynik grep dla '<h4>Breached Thresholds</h4>' -A1:"
        echo "$grep_result"
        grep_o_result=$(echo "$grep_result" | grep -oe ">\d<")
        echo "Wynik grep -o dla '>\d<'"
        echo "$grep_o_result"
        final_result=$(echo "$grep_o_result" | sed 's/[<>]//g')
        echo "Wynik sed 's/[<>]//g':"
        echo "$final_result"
        echo "Threshold count without sidecar: "
        cat tests/performance/summary-no-sidecar.html | grep "<h4>Breached Thresholds</h4>" -A1 | grep -oe ">\d<" | sed 's/[<>]//g'
        if [[ $(cat tests/performance/summary-no-sidecar.html | grep "<h4>Breached Thresholds</h4>" -A1 | grep -oe ">\d<" | sed 's/[<>]//g') -ne 0 ]]; then
        echo "Breaches found."
        exit 1
        else
        echo "No breaches found without sidecar."
        fi
    - name: Check threshold breaches on test with sidecar
      if: always()
      shell: bash
      run: |
        echo "Reading summary-sidecar.html..."
        file_content=$(cat tests/performance/summary-sidecar.html)
        echo "Zawartość pliku:"
        echo "$file_content"
        grep_result=$(echo "$file_content" | grep "<h4>Breached Thresholds</h4>" -A1)
        echo "Wynik grep dla '<h4>Breached Thresholds</h4>' -A1:"
        echo "$grep_result"
        grep_o_result=$(echo "$grep_result" | grep -oe ">\d<")
        echo "Wynik grep -o dla '>\d<'"
        echo "$grep_o_result"
        final_result=$(echo "$grep_o_result" | sed 's/[<>]//g')
        echo "Wynik sed 's/[<>]//g':"
        echo "$final_result"
        echo "Threshold count with sidecar: "
        cat tests/performance/summary-sidecar.html | grep "<h4>Breached Thresholds</h4>" -A1 | grep -oe ">\d<" | sed 's/[<>]//g'
        if [[ $(cat tests/performance/summary-sidecar.html | grep "<h4>Breached Thresholds</h4>" -A1 | grep -oe ">\d<" | sed 's/[<>]//g') -ne 0 ]]; then
        echo "Breaches found."
        exit 1
        else
        echo "No breaches found with sidecar."
        fi
    - name: Deprovision cluster
      if: always()
      shell: bash
      env:
        GARDENER_KUBECONFIG: "${{ github.workspace }}/gardener_kubeconfig.yaml"
        GARDENER_PROJECT_NAME: ${{ inputs.gardener_project_name }}
      run: "${{ github.workspace }}/hack/ci/scripts-v2/deprovision-gardener.sh"
    - name: Checks for failure
      if: failure()
      shell: bash
      run: exit 1
